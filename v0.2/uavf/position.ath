load "real"
load "state"
load "configuration"

module Position{
    define 
    [wa w lwa rwa ha nr hae has alpha t Rfs sx sy sz vx vy vz sxi syi szi vxi vyi vzi st st_i] := 
        [
            ?wa: Real ?w:Wing ?lwa: Real ?rwa: Real ?ha: Real ?nr: Real ?hae: Real ?has: Real 
            ?alpha: Real ?t: Real ?Rfs: Real
            ?sx: Real ?sy: Real ?sz: Real ?vx: Real ?vy: Real ?vz: Real 
            ?sxi: Real ?syi: Real ?szi: Real ?vxi: Real ?vyi: Real ?vzi: Real
            ?st: State ?st_i: State
        ]

    define [cfg_i cfg_i+1] := [?cfg_i: Configuration ?cfg_i+1: Configuration]

    define [state_l state_f] := [?state_l: State ?state_f: State]


    declare zero-velocity-state: [Real Real Real] -> State
    assert* zero-velocity-state-axiom := 
        ((zero-velocity-state sx sy sz) = (state sx sy sz 0 0 0))

    declare position-left-follower: [State Real Real Real] -> State 
    declare position-right-follower: [State Real Real Real] -> State 
    assert position-follower-axiom :=
        let{
            cos_left  := (Real.cos lwa + ha);
            sin_left  := (Real.sin lwa + ha);
            cos_right := (Real.cos rwa + ha);
            sin_right := (Real.sin rwa + ha);
            st_x      := (State.getsx st);
            st_y      := (State.getsy st);
            st_z      := (State.getsz st);
            st_vz     := (State.getvz st)
        }
        (fun
            [
                (position-left-follower st lwa ha nr) =
                    (zero-velocity-state (st_x + nr * cos_left) (st_y + nr * sin_left) st_z)
                (position-right-follower st rwa ha nr) =
                    (zero-velocity-state (st_x + nr * cos_right) (st_y + nr * sin_right) st_z)    
            ]
        )



    declare follower : [Configuration Real Real Wing] -> Configuration
    assert follower-axiom := 
        let{
            state_c := (Configuration.to-state cfg_i);
            config_h := (Configuration.geth cfg_i);
            config_t := (Configuration.gettime cfg_i);
            config_vg := (Configuration.getvg cfg_i)
        }(fun
            [
                (follower cfg_i wa nr w) = 
                    [
                        nilC 
                            when (Configuration.is-empty cfg_i)
                        (
                            State.to-configuration 
                                (position-left-follower state_c wa config_h nr) 
                                config_vg 
                                config_h 
                                config_t
                        ) 
                            when (w = L)
                        (
                            State.to-configuration 
                                (position-right-follower state_c wa config_h nr) 
                                config_vg 
                                config_h 
                                config_t
                        ) 
                            when (w = R)
                    ]
            ]
        )
    

    declare angle-motion : [Real Real] -> Real
    assert angle-motion-axiom := ((angle-motion hae has) = (hae - has))

    # TODO: Implement the common-center-distance function to return not the postion but
    # the distance between the two states
    declare common-center-distance : [Configuration Configuration] -> Real
    assert common-center-axiom := 
        let{
            st_x  := (Configuration.getsx cfg_i);
            st_y  := (Configuration.getsy cfg_i);
            sti_x := (Configuration.getsx cfg_i+1);
            sti_y := (Configuration.getsy cfg_i+1);
            x_diff := ((st_x - sti_x) * (st_x - sti_x));
            y_diff := ((st_y - sti_y) * (st_y - sti_y));
            distance := ((Real.sqrt (x_diff + y_diff)) / 2);
            cfg_empty := (Configuration.is-empty cfg_i);
            cfg_i+1_empty := (Configuration.is-empty cfg_i+1);
            empty := (cfg_empty & cfg_i+1_empty)
        }
        (fun
            [
                (common-center-distance cfg_i cfg_i+1) =  
                [
                    0.0 when empty
                    distance when (~ empty)
                ]
            ]
        )

    declare follower-velocity : [Real Real Real] -> Real
    assert follower-velocity-axiom := 
        ((follower-velocity Rfs alpha t) = ((Rfs * alpha) / t))

}